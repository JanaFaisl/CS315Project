# -*- coding: utf-8 -*-
"""BST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JW17DGx-4zGX3buMkWYWJYCxXK2LdnPH
"""

import time
import matplotlib.pyplot as plt
import pandas as pd
import random
import numpy as np

class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

def create_balanced_bst(keys):
    if not keys:
        return None

    # Find the middle element of the sorted array
    mid = len(keys) // 2

    # Create a root node with the middle element
    root = Node(best_case_keys[mid])

    # Recursively construct the left and right subtrees
    root.left = create_balanced_bst(keys[:mid])
    root.right = create_balanced_bst(keys[mid + 1:])

    return root
# Worst Case Scenario (Skewed Tree)
def create_worst_case_bst(keys):
    root = None
    for key in keys:
        root = insert_increasing_order(root, key)
    return root

def insert_increasing_order(root, key):
    if root is None:
        return Node(key)
    if key < root.key:
        root.left = insert_increasing_order(root.left, key)
    else:
        root.right = insert_increasing_order(root.right, key)
    return root

# Average Case Scenario (Random Insertion)
def insert_random(root, key):
    if root is None:
        return Node(key)
    if key < root.key:
        root.left = insert_random(root.left, key)
    else:
        root.right = insert_random(root.right, key)
    return root

def create_average_case_bst(keys):
    root = None
    for key in keys:
        root = insert_random(root, key)
    return root

size = 100

num_iterations = 100

total_time = 0

for _ in range(num_iterations):
    start_time = time.time()

    best_case_keys =  list(range(1, size+1))
    balanced_bst = create_balanced_bst(best_case_keys)

    end_time = time.time()
    elapsed_time = end_time - start_time
    total_time += elapsed_time

average_time1 = total_time / num_iterations

print("Average time for best case with size = 100: {:.6f} seconds".format(average_time1))

size = 500

num_iterations = 100

total_time = 0

for _ in range(num_iterations):
    start_time = time.time()

    best_case_keys =  list(range(1, size+1))
    balanced_bst = create_balanced_bst(best_case_keys)

    end_time = time.time()
    elapsed_time = end_time - start_time
    total_time += elapsed_time

average_time11 = total_time / num_iterations

print("Average time for best case with size = 500: {:.6f} seconds".format(average_time11))

size = 900

num_iterations = 100

total_time = 0

for _ in range(num_iterations):
    start_time = time.time()

    best_case_keys =  list(range(1, size+1))
    balanced_bst = create_balanced_bst(best_case_keys)

    end_time = time.time()
    elapsed_time = end_time - start_time
    total_time += elapsed_time

average_time111 = total_time / num_iterations

print("Average time for best case with size = 900: {:.6f} seconds".format(average_time111))

size = 100

num_iterations = 100

total_time = 0

for _ in range(num_iterations):
    start_time = time.time()

    worst_case_keys =  list(range(1, size+1))
    worst_case_bst = create_worst_case_bst(worst_case_keys)

    end_time = time.time()
    elapsed_time = end_time - start_time
    total_time += elapsed_time

average_time2 = total_time / num_iterations

print("Average time for worst case with size = 100: {:.6f} seconds".format(average_time2))

size = 500

num_iterations = 100

total_time = 0

for _ in range(num_iterations):
    start_time = time.time()

    worst_case_keys =  list(range(1, size+1))
    worst_case_bst = create_worst_case_bst(worst_case_keys)

    end_time = time.time()
    elapsed_time = end_time - start_time
    total_time += elapsed_time

average_time22 = total_time / num_iterations

print("Average time for worst case with size = 500: {:.6f} seconds".format(average_time22))

size = 900

num_iterations = 100

total_time = 0

for _ in range(num_iterations):
    start_time = time.time()

    worst_case_keys =  list(range(1, size+1))
    worst_case_bst = create_worst_case_bst(worst_case_keys)

    end_time = time.time()
    elapsed_time = end_time - start_time
    total_time += elapsed_time

average_time222 = total_time / num_iterations

print("Average time for worst case with size = 900: {:.6f} seconds".format(average_time222))

size = 100

num_iterations = 100

total_time = 0

for _ in range(num_iterations):
    start_time = time.time()


    average_case_keys = random.sample(range(1, size+1), size)
    average_case_bst = create_average_case_bst(average_case_keys)

    end_time = time.time()
    elapsed_time = end_time - start_time
    total_time += elapsed_time

average_time3 = total_time / num_iterations

print("Average time for average case with size = 100: {:.6f} seconds".format(average_time3))

size = 500

num_iterations = 100

total_time = 0

for _ in range(num_iterations):
    start_time = time.time()


    average_case_keys = random.sample(range(1, size+1), size)
    average_case_bst = create_average_case_bst(average_case_keys)

    end_time = time.time()
    elapsed_time = end_time - start_time
    total_time += elapsed_time

average_time33 = total_time / num_iterations

print("Average time for average case with size = 500: {:.6f} seconds".format(average_time33))

size = 900

num_iterations = 100

total_time = 0

for _ in range(num_iterations):
    start_time = time.time()


    average_case_keys = random.sample(range(1, size+1), size)
    average_case_bst = create_average_case_bst(average_case_keys)

    end_time = time.time()
    elapsed_time = end_time - start_time
    total_time += elapsed_time

average_time333 = total_time / num_iterations

print("Average time for average case with size = 900: {:.6f} seconds".format(average_time333))

# initialize data of lists.
# n: represents the input size
# case: whether it is best, average or worst
# time: the average running time for each case and input

data = {'n': [100, 100, 100, 500, 500, 500, 900, 900, 900],
        'case': ['best',  'worst', 'average', 'best',  'worst', 'average', 'best',  'worst', 'average'],
        'time': [average_time1, average_time2, average_time3, average_time11, average_time22, average_time33, average_time111, average_time222, average_time333]}


# Creates pandas DataFrame.
df = pd.DataFrame(data)


# print the data
df


#import plotly to chart your data
import plotly.express as px

# Assuming you have your 'data' DataFrame set up

fig = px.line(data, x='n', y='time', color='case')

# Increase the width of the line columns
fig.update_traces(mode='markers+lines', line_shape='linear', line_width=3)  # Adjust the line_width as needed

# Make sure the x-axis is categorical
fig.update_layout(xaxis_type='category')

# Show the chart
fig.show()