# -*- coding: utf-8 -*-
"""Hashing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i9kMEASpD55pyRrPNnb9rXg_1EOwnHg1
"""

import time
import matplotlib.pyplot as plt
import pandas as pd
import random
import numpy as np

class HashTable:
    def __init__(self, size):
        self.size = size
        self.table = [None] * size

    def _hash(self, key):
        return hash(key) % self.size

    def insert(self, key, value):
        index = self._hash(key)
        if self.table[index] is None:
            self.table[index] = []
        for item in self.table[index]:
            if item[0] == key:
                item[1] = value
                return
        self.table[index].append([key, value])

    def get(self, key):
        index = self._hash(key)
        if self.table[index] is not None:
            for item in self.table[index]:
                if item[0] == key:
                    return item[1]
        raise KeyError(f"Key '{key}' not found")

size = 1000
best_case_hash_table1 = HashTable(size)

num_iterations = 100

total_time = 0

for _ in range(num_iterations):
    start_time = time.time()


    # Insert keys in the "best" case scenario
    for i in range(size):
      value = f"value{i}"
      best_case_hash_table1.insert(i, value)

    end_time = time.time()
    elapsed_time = end_time - start_time
    total_time += elapsed_time

average_time1 = total_time / num_iterations

print("Average time for best case with size = 1000: {:.6f} seconds".format(average_time1))

size = 5000
best_case_hash_table11 = HashTable(size)

num_iterations = 100

total_time = 0

for _ in range(num_iterations):
    start_time = time.time()


    # Insert keys in the "best" case scenario
    for i in range(size):
      value = f"value{i}"
      best_case_hash_table11.insert(i, value)

    end_time = time.time()
    elapsed_time = end_time - start_time
    total_time += elapsed_time

average_time11 = total_time / num_iterations

print("Average time for best case with size = 5000: {:.6f} seconds".format(average_time11))

size = 10000
best_case_hash_table111 = HashTable(size)

num_iterations = 100

total_time = 0

for _ in range(num_iterations):
    start_time = time.time()


    for i in range(size):
      value = f"value{i}"
      best_case_hash_table111.insert(i, value)

    end_time = time.time()
    elapsed_time = end_time - start_time
    total_time += elapsed_time

average_time111 = total_time / num_iterations

print("Average time for best case with size = 10000: {:.6f} seconds".format(average_time111))

size = 1000
worst_case_hash_table2 = HashTable(size)

num_iterations = 100

total_time = 0

for _ in range(num_iterations):
    start_time = time.time()


    # Insert keys in the "worst" case scenario
    for i in range(size):
        key = (i * size)
        value = f"value{i}"
        worst_case_hash_table2.insert(key, value)



    end_time = time.time()
    elapsed_time = end_time - start_time
    total_time += elapsed_time

average_time2 = total_time / num_iterations

print("Average time for worst case with size = 1000: {:.6f} seconds".format(average_time2))

size = 5000
worst_case_hash_table22 = HashTable(size)

num_iterations = 100

total_time = 0

for _ in range(num_iterations):
    start_time = time.time()



    # Insert keys in the "worst" case scenario
    for i in range(size):
        key = (i * size)
        value = f"value{i}"
        worst_case_hash_table22.insert(key, value)



    end_time = time.time()
    elapsed_time = end_time - start_time
    total_time += elapsed_time

average_time22 = total_time / num_iterations

print("Average time for worst case with size = 5000: {:.6f} seconds".format(average_time22))

size = 10000
worst_case_hash_table222 = HashTable(size)

num_iterations = 100

total_time = 0

for _ in range(num_iterations):
    start_time = time.time()


    # Insert keys in the "worst" case scenario
    for i in range(size):
        key = (i * size)
        value = f"value{i}"
        worst_case_hash_table222.insert(key, value)



    end_time = time.time()
    elapsed_time = end_time - start_time
    total_time += elapsed_time

average_time222 = total_time / num_iterations

print("Average time for worst case with size = 10000: {:.6f} seconds".format(average_time222))

size = 1000
avg_case_hash_table3 = HashTable(size)

num_iterations = 100

total_time = 0

for _ in range(num_iterations):
    start_time = time.time()

    for i in range(size):

        key = np.random.randint(0, size)
        value = f"value{i}"
        avg_case_hash_table3.insert(key, value)


    end_time = time.time()
    elapsed_time = end_time - start_time
    total_time += elapsed_time

average_time3 = total_time / num_iterations

print("Average time for avgerage case with size = 1000: {:.6f} seconds".format(average_time3))

size = 5000
avg_case_hash_table33 = HashTable(size)

num_iterations = 100

total_time = 0

for _ in range(num_iterations):
    start_time = time.time()

    for i in range(size):

        key = np.random.randint(0, size)
        value = f"value{i}"
        avg_case_hash_table33.insert(key, value)



    end_time = time.time()
    elapsed_time = end_time - start_time
    total_time += elapsed_time

average_time33 = total_time / num_iterations

print("Average time for average case with size = 5000: {:.6f} seconds".format(average_time33))

size = 10000
avg_case_hash_table333 = HashTable(size)

num_iterations = 100

total_time = 0

for _ in range(num_iterations):
    start_time = time.time()

    for i in range(size):

        key = np.random.randint(0, size)
        value = f"value{i}"
        avg_case_hash_table333.insert(key, value)



    end_time = time.time()
    elapsed_time = end_time - start_time
    total_time += elapsed_time

average_time333 = total_time / num_iterations

print("Average time for average case with size = 10000: {:.6f} seconds".format(average_time333))

# initialize data of lists.
# n: represents the input size
# case: whether it is best, average or worst
# time: the average running time for each case and input
data = {'n': [1000, 1000, 1000, 5000, 5000, 5000, 10000, 10000, 10000],
        'case': ['best',  'worst', 'average', 'best',  'worst', 'average', 'best',  'worst', 'average'],
        'time': [average_time1, average_time2, average_time3, average_time11, average_time22, average_time33, average_time111, average_time222, average_time333]}


# Creates pandas DataFrame.
df = pd.DataFrame(data)


# print the data
df


#import plotly to chart your data
import plotly.express as px

# Assuming you have your 'data' DataFrame set up

fig = px.line(data, x='n', y='time', color='case')

# Increase the width of the line columns
fig.update_traces(mode='markers+lines', line_shape='linear', line_width=3)  # Adjust the line_width as needed

# Make sure the x-axis is categorical
fig.update_layout(xaxis_type='category')

# Show the chart
fig.show()